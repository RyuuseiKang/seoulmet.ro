{"version":3,"sources":["logo.svg","pages/Maintenance.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","Main","props","updateInputValue","input","event","newState","target","value","setState","state","startStation","viaStation","endStation","class","this","style","fontFamily","placeholder","name","onChange","bind","inputStyle","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","borderColor","icon","faArrowRight","backgroundColor","paddingLeft","paddingRight","fontSize","type","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,mLCMjBC,IAAMC,U,+BCqDjBC,G,wDA9Cb,WAAaC,GAAQ,IAAD,8BACpB,cAAMA,IAQNC,iBAAmB,SAACC,EAAOC,GAC3B,IAAMC,EAAW,GACjBA,EAASF,GAASC,EAAME,OAAOC,MAC/B,EAAKC,SAASH,IAVd,EAAKI,MAAQ,CACTC,aAAc,GACdC,WAAY,GACZC,WAAY,IALI,E,qDAgBlB,OACE,6BACE,kBAAC,IAAD,CACEC,MAAM,WACNN,MAAOO,KAAKL,MAAMC,aAClBK,MAAO,CAACC,WAAY,6BACpBC,YAAY,eACZC,KAAK,eACLC,SAAUL,KAAKZ,iBAAiBkB,KAAKN,KAAM,gBAC3CO,WAAY,CAAEC,eAAgB,EAAGC,gBAAiB,EAAGC,iBAAkB,EAAGC,kBAAmB,IAAKC,YAAa,eAEjH,0BAAMb,MAAM,kBAAZ,WACA,kBAAC,IAAD,CAAiBc,KAAMC,IAAcb,MAAO,CAACc,gBAAiB,YAAaC,YAAa,GAAIC,aAAc,GAAIC,SAAU,UACxH,kBAAC,IAAD,CACEnB,MAAM,WACNN,MAAOO,KAAKL,MAAMG,WAClBG,MAAO,CAACC,WAAY,6BACpBC,YAAY,eACZC,KAAK,aACLC,SAAUL,KAAKZ,iBAAiBkB,KAAKN,KAAM,cAC3CO,WAAY,CAAEC,eAAgB,EAAGC,gBAAiB,EAAGC,iBAAkB,EAAGC,kBAAmB,IAAKC,YAAa,eAC/G,0BAAMb,MAAM,kBAAZ,WACF,6BACE,2BAAOoB,KAAK,SAAS1B,MAAM,oC,GAxClBT,IAAMC,YCOVmC,MAVf,WACE,OACA,yBAAKC,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC,EAAD,SCDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.78970e0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport '../App.css';\n\nimport '../Style.css';\nimport './css/Maintenance.css';\n\nclass Maintenance extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>\n\t\t\t\t\t준비중이에요 :P\n\t\t\t\t</h1>\n\t\t\t\t<span>\n\t\t\t\t\t여기는 <a href=\"http://seoulmetro.co.kr\">서울메트로</a> 또는 <a href=\"http://korail.com\">KORAIL</a>과 아무런 관계가 없어요!\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t);\n\t}\n  \n}\n\nexport default Maintenance;\n","import React from \"react\";\n\nimport AutosizeInput from 'react-input-autosize';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\n\nimport \"../App.css\";\n\nimport \"../Style.css\";\nimport \"./css/Main.css\"\n\nclass Main extends React.Component {\n  constructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n      startStation: '',\n      viaStation: [],\n      endStation: '',\n\t\t};\n  }\n\n  updateInputValue = (input, event) => {\n\t\tconst newState = {};\n\t\tnewState[input] = event.target.value;\n\t\tthis.setState(newState);\n\t};\n  \n  render() {\n    return (\n      <div>\n        <AutosizeInput\n          class=\"inputBox\"\n          value={this.state.startStation}\n          style={{fontFamily: 'UD Shin Go Hangul Regular'}}\n          placeholder=\"강남\"\n          name=\"startStation\"\n          onChange={this.updateInputValue.bind(this, 'startStation')}\n          inputStyle={{ borderTopWidth: 0, borderLeftWidth: 0, borderRightWidth: 0, borderBottomWidth: 2.5, borderColor: '#00000000'}}\n        />\n        <span class=\"inputTextBlock\">역 </span>\n        <FontAwesomeIcon icon={faArrowRight} style={{backgroundColor: '#00000000', paddingLeft: 15, paddingRight: 15, fontSize: '2rem'}}/>\n        <AutosizeInput\n          class=\"inputBox\"\n          value={this.state.endStation}\n          style={{fontFamily: 'UD Shin Go Hangul Regular'}}\n          placeholder=\"서울\"\n          name=\"endStation\"\n          onChange={this.updateInputValue.bind(this, 'endStation')}\n          inputStyle={{ borderTopWidth: 0, borderLeftWidth: 0, borderRightWidth: 0, borderBottomWidth: 2.5, borderColor: '#00000000'}}\n        /><span class=\"inputTextBlock\">역 </span>\n        <div>\n          <input type=\"submit\" value=\"경로 검색\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport './Style.css';\n\nimport Maintenance from './pages/Maintenance';\nimport Main from './pages/Main';\n\nfunction App() {\n  return (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Main/>\n\t\t\t</header>\n\t\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}